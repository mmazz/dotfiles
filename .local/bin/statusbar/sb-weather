#!/bin/sh
# Lukes

# Displays todays precipication chance (☔) and daily low (🥶) and high (�).
# Usually intended for the statusbar.

# If we have internet, get a weather report from wttr.in and store it locally.
# You could set up a shell alias to view the full file in a pager in the
# terminal if desired. This function will only be run once a day when needed.
LOCATION="Buenos+Aires"
weatherReport="$HOME/.local/share/weatherReport"

getForecast() { curl -sf "wttr.in/$LOCATION" > "$weatherReport" || exit 1 ;}

# Some very particular and terse stream manipulation. We get the maximum
# precipitation chance and the daily high and low from the downloaded file and
# display them with coresponding emojis.
showWeather() { printf "%s" "$(sed '16q;d' "$weatherReport" |
	grep -wo "[0-9]*%" | sort -rn | sed "s/^/☔/g;1q" | tr -d '\n')"
sed '13q;d' "$weatherReport" | grep -o "m\\([-+]\\)*[0-9]\\+" | sed 's/+//g' | \
    sort -n -t 'm' -k 2n | sed -e 1b -e '$!d' | tr '\n|m' ' ' | awk \
    '{print "  " $1 "°"," " $2 "°"}' ;}



#case $BUTTON in
#    1) "$TERMINAL" -e "less" "$weatherReport" ;;
#    3) getForecast && showWeather ;;
#	2) notify-send "🌈 Weather module" "\- Left click for actual forecast.
#- Right click to update forecast.
#☔: Chance of rain/snow
# : Daily low
# : Daily high" ;;
#	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
#esac

# The test if our forcecast is updated to the day. If it isn't download a new
# weather report from wttr.in with the above function.
[ "$(stat -c %y '$weatherReport' 2>/dev/null | cut -d' ' -f1)" = "$(date '+%Y-%m-%d')" ] ||
	getForecast

showWeather
